/*
 * Twilio - Conversations
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration {
    /// The unique ID of the Account responsible for this service.
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The unique ID of the [Conversation Service](https://www.twilio.com/docs/conversations/api/service-resource) this conversation belongs to.
    #[serde(rename = "chat_service_sid", skip_serializing_if = "Option::is_none")]
    pub chat_service_sid: Option<String>,
    /// The list of events that your configured webhook targets will receive. Events not configured here will not fire.
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<String>>,
    /// The HTTP method to be used when sending a webhook request
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<Method>,
    /// The absolute url the post-event webhook request should be sent to.
    #[serde(rename = "post_webhook_url", skip_serializing_if = "Option::is_none")]
    pub post_webhook_url: Option<String>,
    /// The absolute url the pre-event webhook request should be sent to.
    #[serde(rename = "pre_webhook_url", skip_serializing_if = "Option::is_none")]
    pub pre_webhook_url: Option<String>,
    /// An absolute URL for this webhook.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration {
    pub fn new() -> ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration {
        ConversationsV1ServiceServiceConfigurationServiceWebhookConfiguration {
            account_sid: None,
            chat_service_sid: None,
            filters: None,
            method: None,
            post_webhook_url: None,
            pre_webhook_url: None,
            url: None,
        }
    }
}

/// The HTTP method to be used when sending a webhook request
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Method {
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
}

impl Default for Method {
    fn default() -> Method {
        Self::GET
    }
}
