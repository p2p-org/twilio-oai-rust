/*
 * Twilio - Insights
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InsightsV1ConferenceConferenceParticipant {
    /// Account SID.
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// Call direction of the participant.
    #[serde(rename = "call_direction", skip_serializing_if = "Option::is_none")]
    pub call_direction: Option<CallDirection>,
    /// Unique SID identifier of the call.
    #[serde(rename = "call_sid", skip_serializing_if = "Option::is_none")]
    pub call_sid: Option<String>,
    /// Call status of the call that generated the participant.
    #[serde(rename = "call_status", skip_serializing_if = "Option::is_none")]
    pub call_status: Option<CallStatus>,
    /// The Call Type of this Conference Participant.
    #[serde(rename = "call_type", skip_serializing_if = "Option::is_none")]
    pub call_type: Option<CallType>,
    /// Call SIDs coached by this participant.
    #[serde(
        rename = "coached_participants",
        skip_serializing_if = "Option::is_none"
    )]
    pub coached_participants: Option<Vec<String>>,
    /// The Conference Region of this Conference Participant.
    #[serde(rename = "conference_region", skip_serializing_if = "Option::is_none")]
    pub conference_region: Option<ConferenceRegion>,
    /// Conference SID.
    #[serde(rename = "conference_sid", skip_serializing_if = "Option::is_none")]
    pub conference_sid: Option<String>,
    /// ISO alpha-2 country code of the participant.
    #[serde(rename = "country_code", skip_serializing_if = "Option::is_none")]
    pub country_code: Option<String>,
    /// Participant durations in seconds.
    #[serde(rename = "duration_seconds", skip_serializing_if = "Option::is_none")]
    pub duration_seconds: Option<i32>,
    /// Object containing information of actions taken by participants. Nested resource URLs.
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<serde_json::Value>,
    /// Caller ID of the calling party.
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// Boolean. Indicated whether participant was a coach.
    #[serde(rename = "is_coach", skip_serializing_if = "Option::is_none")]
    pub is_coach: Option<bool>,
    /// Boolean. Indicates whether participant had startConferenceOnEnter=true or endConferenceOnExit=true.
    #[serde(rename = "is_moderator", skip_serializing_if = "Option::is_none")]
    pub is_moderator: Option<bool>,
    /// The Jitter Buffer Size of this Conference Participant.
    #[serde(rename = "jitter_buffer_size", skip_serializing_if = "Option::is_none")]
    pub jitter_buffer_size: Option<JitterBufferSize>,
    /// ISO 8601 timestamp of participant join event.
    #[serde(rename = "join_time", skip_serializing_if = "Option::is_none")]
    pub join_time: Option<String>,
    /// The user-specified label of this participant.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// ISO 8601 timestamp of participant leave event.
    #[serde(rename = "leave_time", skip_serializing_if = "Option::is_none")]
    pub leave_time: Option<String>,
    /// Object. Contains participant quality metrics.
    #[serde(rename = "metrics", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<serde_json::Value>,
    /// Estimated time in queue at call creation.
    #[serde(
        rename = "outbound_queue_length",
        skip_serializing_if = "Option::is_none"
    )]
    pub outbound_queue_length: Option<i32>,
    /// Actual time in queue (seconds).
    #[serde(
        rename = "outbound_time_in_queue",
        skip_serializing_if = "Option::is_none"
    )]
    pub outbound_time_in_queue: Option<i32>,
    /// Twilio region where the participant media originates.
    #[serde(rename = "participant_region", skip_serializing_if = "Option::is_none")]
    pub participant_region: Option<ParticipantRegion>,
    /// SID for this participant.
    #[serde(rename = "participant_sid", skip_serializing_if = "Option::is_none")]
    pub participant_sid: Option<String>,
    /// Processing state of the Participant Summary.
    #[serde(rename = "processing_state", skip_serializing_if = "Option::is_none")]
    pub processing_state: Option<ProcessingState>,
    /// Participant properties and metadata.
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    /// Called party.
    #[serde(rename = "to", skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
    /// The URL of this resource.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl InsightsV1ConferenceConferenceParticipant {
    pub fn new() -> InsightsV1ConferenceConferenceParticipant {
        InsightsV1ConferenceConferenceParticipant {
            account_sid: None,
            call_direction: None,
            call_sid: None,
            call_status: None,
            call_type: None,
            coached_participants: None,
            conference_region: None,
            conference_sid: None,
            country_code: None,
            duration_seconds: None,
            events: None,
            from: None,
            is_coach: None,
            is_moderator: None,
            jitter_buffer_size: None,
            join_time: None,
            label: None,
            leave_time: None,
            metrics: None,
            outbound_queue_length: None,
            outbound_time_in_queue: None,
            participant_region: None,
            participant_sid: None,
            processing_state: None,
            properties: None,
            to: None,
            url: None,
        }
    }
}

/// Call direction of the participant.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CallDirection {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for CallDirection {
    fn default() -> CallDirection {
        Self::Inbound
    }
}
/// Call status of the call that generated the participant.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CallStatus {
    #[serde(rename = "answered")]
    Answered,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "busy")]
    Busy,
    #[serde(rename = "fail")]
    Fail,
    #[serde(rename = "noanswer")]
    Noanswer,
    #[serde(rename = "ringing")]
    Ringing,
    #[serde(rename = "canceled")]
    Canceled,
}

impl Default for CallStatus {
    fn default() -> CallStatus {
        Self::Answered
    }
}
/// The Call Type of this Conference Participant.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CallType {
    #[serde(rename = "carrier")]
    Carrier,
    #[serde(rename = "client")]
    Client,
    #[serde(rename = "sip")]
    Sip,
}

impl Default for CallType {
    fn default() -> CallType {
        Self::Carrier
    }
}
/// The Conference Region of this Conference Participant.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConferenceRegion {
    #[serde(rename = "us1")]
    Us1,
    #[serde(rename = "us2")]
    Us2,
    #[serde(rename = "au1")]
    Au1,
    #[serde(rename = "br1")]
    Br1,
    #[serde(rename = "ie1")]
    Ie1,
    #[serde(rename = "jp1")]
    Jp1,
    #[serde(rename = "sg1")]
    Sg1,
    #[serde(rename = "de1")]
    De1,
}

impl Default for ConferenceRegion {
    fn default() -> ConferenceRegion {
        Self::Us1
    }
}
/// The Jitter Buffer Size of this Conference Participant.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum JitterBufferSize {
    #[serde(rename = "large")]
    Large,
    #[serde(rename = "small")]
    Small,
    #[serde(rename = "medium")]
    Medium,
    #[serde(rename = "off")]
    Off,
}

impl Default for JitterBufferSize {
    fn default() -> JitterBufferSize {
        Self::Large
    }
}
/// Twilio region where the participant media originates.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ParticipantRegion {
    #[serde(rename = "us1")]
    Us1,
    #[serde(rename = "us2")]
    Us2,
    #[serde(rename = "au1")]
    Au1,
    #[serde(rename = "br1")]
    Br1,
    #[serde(rename = "ie1")]
    Ie1,
    #[serde(rename = "jp1")]
    Jp1,
    #[serde(rename = "sg1")]
    Sg1,
    #[serde(rename = "de1")]
    De1,
}

impl Default for ParticipantRegion {
    fn default() -> ParticipantRegion {
        Self::Us1
    }
}
/// Processing state of the Participant Summary.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProcessingState {
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "timeout")]
    Timeout,
}

impl Default for ProcessingState {
    fn default() -> ProcessingState {
        Self::Complete
    }
}
