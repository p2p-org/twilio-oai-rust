/*
 * Twilio - Insights
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InsightsV1Conference {
    /// Account SID.
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// Conference SID.
    #[serde(rename = "conference_sid", skip_serializing_if = "Option::is_none")]
    pub conference_sid: Option<String>,
    /// Duration of the conference in seconds.
    #[serde(
        rename = "connect_duration_seconds",
        skip_serializing_if = "Option::is_none"
    )]
    pub connect_duration_seconds: Option<i32>,
    /// Conference creation date/time.
    #[serde(rename = "create_time", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// Potential issues detected during the conference.
    #[serde(rename = "detected_issues", skip_serializing_if = "Option::is_none")]
    pub detected_issues: Option<serde_json::Value>,
    /// Conference duration in seconds.
    #[serde(rename = "duration_seconds", skip_serializing_if = "Option::is_none")]
    pub duration_seconds: Option<i32>,
    /// Conference end reason.
    #[serde(rename = "end_reason", skip_serializing_if = "Option::is_none")]
    pub end_reason: Option<EndReason>,
    /// Conference end date/time.
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// Call SID that ended the conference.
    #[serde(rename = "ended_by", skip_serializing_if = "Option::is_none")]
    pub ended_by: Option<String>,
    /// Custom label for the conference.
    #[serde(rename = "friendly_name", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    /// Nested resource URLs.
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// Actual maximum concurrent participants.
    #[serde(
        rename = "max_concurrent_participants",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_concurrent_participants: Option<i32>,
    /// Max participants specified in config.
    #[serde(rename = "max_participants", skip_serializing_if = "Option::is_none")]
    pub max_participants: Option<i32>,
    /// Region where the conference was mixed.
    #[serde(rename = "mixer_region", skip_serializing_if = "Option::is_none")]
    pub mixer_region: Option<MixerRegion>,
    /// Configuration-requested conference mixer region.
    #[serde(
        rename = "mixer_region_requested",
        skip_serializing_if = "Option::is_none"
    )]
    pub mixer_region_requested: Option<MixerRegionRequested>,
    /// Processing state for the Conference Summary resource.
    #[serde(rename = "processing_state", skip_serializing_if = "Option::is_none")]
    pub processing_state: Option<ProcessingState>,
    /// Boolean. Indicates whether recording was enabled.
    #[serde(rename = "recording_enabled", skip_serializing_if = "Option::is_none")]
    pub recording_enabled: Option<bool>,
    /// Timestamp in ISO 8601 format when the conference started.
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// Status of conference
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Object. Contains details about conference tags.
    #[serde(rename = "tag_info", skip_serializing_if = "Option::is_none")]
    pub tag_info: Option<serde_json::Value>,
    /// Tags for detected conference conditions and participant behaviors.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<Tags>>,
    /// Unique conference participants.
    #[serde(
        rename = "unique_participants",
        skip_serializing_if = "Option::is_none"
    )]
    pub unique_participants: Option<i32>,
    /// The URL of this resource.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl InsightsV1Conference {
    pub fn new() -> InsightsV1Conference {
        InsightsV1Conference {
            account_sid: None,
            conference_sid: None,
            connect_duration_seconds: None,
            create_time: None,
            detected_issues: None,
            duration_seconds: None,
            end_reason: None,
            end_time: None,
            ended_by: None,
            friendly_name: None,
            links: None,
            max_concurrent_participants: None,
            max_participants: None,
            mixer_region: None,
            mixer_region_requested: None,
            processing_state: None,
            recording_enabled: None,
            start_time: None,
            status: None,
            tag_info: None,
            tags: None,
            unique_participants: None,
            url: None,
        }
    }
}

/// Conference end reason.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndReason {
    #[serde(rename = "last_participant_left")]
    LastParticipantLeft,
    #[serde(rename = "conference_ended_via_api")]
    ConferenceEndedViaApi,
    #[serde(rename = "participant_with_end_conference_on_exit_left")]
    ParticipantWithEndConferenceOnExitLeft,
    #[serde(rename = "last_participant_kicked")]
    LastParticipantKicked,
    #[serde(rename = "participant_with_end_conference_on_exit_kicked")]
    ParticipantWithEndConferenceOnExitKicked,
}

impl Default for EndReason {
    fn default() -> EndReason {
        Self::LastParticipantLeft
    }
}
/// Region where the conference was mixed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MixerRegion {
    #[serde(rename = "us1")]
    Us1,
    #[serde(rename = "au1")]
    Au1,
    #[serde(rename = "br1")]
    Br1,
    #[serde(rename = "ie1")]
    Ie1,
    #[serde(rename = "jp1")]
    Jp1,
    #[serde(rename = "sg1")]
    Sg1,
    #[serde(rename = "de1")]
    De1,
}

impl Default for MixerRegion {
    fn default() -> MixerRegion {
        Self::Us1
    }
}
/// Configuration-requested conference mixer region.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MixerRegionRequested {
    #[serde(rename = "us1")]
    Us1,
    #[serde(rename = "au1")]
    Au1,
    #[serde(rename = "br1")]
    Br1,
    #[serde(rename = "ie1")]
    Ie1,
    #[serde(rename = "jp1")]
    Jp1,
    #[serde(rename = "sg1")]
    Sg1,
    #[serde(rename = "de1")]
    De1,
}

impl Default for MixerRegionRequested {
    fn default() -> MixerRegionRequested {
        Self::Us1
    }
}
/// Processing state for the Conference Summary resource.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProcessingState {
    #[serde(rename = "complete")]
    Complete,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "timeout")]
    Timeout,
}

impl Default for ProcessingState {
    fn default() -> ProcessingState {
        Self::Complete
    }
}
/// Status of conference
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "not_started")]
    NotStarted,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "summary_timeout")]
    SummaryTimeout,
}

impl Default for Status {
    fn default() -> Status {
        Self::InProgress
    }
}
/// Tags for detected conference conditions and participant behaviors.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tags {
    #[serde(rename = "invalid_requested_region")]
    InvalidRequestedRegion,
    #[serde(rename = "duplicate_identity")]
    DuplicateIdentity,
    #[serde(rename = "start_failure")]
    StartFailure,
    #[serde(rename = "region_configuration_issues")]
    RegionConfigurationIssues,
    #[serde(rename = "quality_warnings")]
    QualityWarnings,
    #[serde(rename = "participant_behavior_issues")]
    ParticipantBehaviorIssues,
    #[serde(rename = "high_packet_loss")]
    HighPacketLoss,
    #[serde(rename = "high_jitter")]
    HighJitter,
    #[serde(rename = "high_latency")]
    HighLatency,
    #[serde(rename = "low_mos")]
    LowMos,
    #[serde(rename = "detected_silence")]
    DetectedSilence,
}

impl Default for Tags {
    fn default() -> Tags {
        Self::InvalidRequestedRegion
    }
}
