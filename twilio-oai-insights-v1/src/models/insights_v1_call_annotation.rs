/*
 * Twilio - Insights
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InsightsV1CallAnnotation {
    /// Account SID.
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// Indicates the answering entity as determined by Answering Machine Detection.
    #[serde(rename = "answered_by", skip_serializing_if = "Option::is_none")]
    pub answered_by: Option<AnsweredBy>,
    /// Call Score
    #[serde(rename = "call_score", skip_serializing_if = "Option::is_none")]
    pub call_score: Option<i32>,
    /// Call SID.
    #[serde(rename = "call_sid", skip_serializing_if = "Option::is_none")]
    pub call_sid: Option<String>,
    /// User comments
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Indicates if the call had any connectivity issue
    #[serde(rename = "connectivity_issue", skip_serializing_if = "Option::is_none")]
    pub connectivity_issue: Option<ConnectivityIssue>,
    /// Call tag for incidents or support ticket
    #[serde(rename = "incident", skip_serializing_if = "Option::is_none")]
    pub incident: Option<String>,
    /// Indicates if the call had audio quality issues.
    #[serde(rename = "quality_issues", skip_serializing_if = "Option::is_none")]
    pub quality_issues: Option<Vec<String>>,
    /// Call spam indicator
    #[serde(rename = "spam", skip_serializing_if = "Option::is_none")]
    pub spam: Option<bool>,
    /// The URL of this resource.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl InsightsV1CallAnnotation {
    pub fn new() -> InsightsV1CallAnnotation {
        InsightsV1CallAnnotation {
            account_sid: None,
            answered_by: None,
            call_score: None,
            call_sid: None,
            comment: None,
            connectivity_issue: None,
            incident: None,
            quality_issues: None,
            spam: None,
            url: None,
        }
    }
}

/// Indicates the answering entity as determined by Answering Machine Detection.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AnsweredBy {
    #[serde(rename = "unknown_answered_by")]
    UnknownAnsweredBy,
    #[serde(rename = "human")]
    Human,
    #[serde(rename = "machine")]
    Machine,
}

impl Default for AnsweredBy {
    fn default() -> AnsweredBy {
        Self::UnknownAnsweredBy
    }
}
/// Indicates if the call had any connectivity issue
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConnectivityIssue {
    #[serde(rename = "unknown_connectivity_issue")]
    UnknownConnectivityIssue,
    #[serde(rename = "no_connectivity_issue")]
    NoConnectivityIssue,
    #[serde(rename = "invalid_number")]
    InvalidNumber,
    #[serde(rename = "caller_id")]
    CallerId,
    #[serde(rename = "dropped_call")]
    DroppedCall,
    #[serde(rename = "number_reachability")]
    NumberReachability,
}

impl Default for ConnectivityIssue {
    fn default() -> ConnectivityIssue {
        Self::UnknownConnectivityIssue
    }
}
