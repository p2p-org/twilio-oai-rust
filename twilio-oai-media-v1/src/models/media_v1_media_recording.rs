/*
 * Twilio - Media
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MediaV1MediaRecording {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The duration of the MediaRecording
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// The format of the MediaRecording
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<Format>,
    /// The URLs of related resources
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// The size of the recording media
    #[serde(rename = "media_size", skip_serializing_if = "Option::is_none")]
    pub media_size: Option<i32>,
    /// The SID of the MediaProcessor
    #[serde(rename = "processor_sid", skip_serializing_if = "Option::is_none")]
    pub processor_sid: Option<String>,
    /// The dimensions of the video image in pixels
    #[serde(rename = "resolution", skip_serializing_if = "Option::is_none")]
    pub resolution: Option<String>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// The SID of the resource that generated the original media
    #[serde(rename = "source_sid", skip_serializing_if = "Option::is_none")]
    pub source_sid: Option<String>,
    /// The status of the MediaRecording
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The URL to which Twilio will send MediaRecording event updates
    #[serde(rename = "status_callback", skip_serializing_if = "Option::is_none")]
    pub status_callback: Option<String>,
    /// The HTTP method Twilio should use to call the `status_callback` URL
    #[serde(
        rename = "status_callback_method",
        skip_serializing_if = "Option::is_none"
    )]
    pub status_callback_method: Option<StatusCallbackMethod>,
    /// The absolute URL of the resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl MediaV1MediaRecording {
    pub fn new() -> MediaV1MediaRecording {
        MediaV1MediaRecording {
            account_sid: None,
            date_created: None,
            date_updated: None,
            duration: None,
            format: None,
            links: None,
            media_size: None,
            processor_sid: None,
            resolution: None,
            sid: None,
            source_sid: None,
            status: None,
            status_callback: None,
            status_callback_method: None,
            url: None,
        }
    }
}

/// The format of the MediaRecording
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Format {
    #[serde(rename = "mp4")]
    Mp4,
    #[serde(rename = "webm")]
    Webm,
}

impl Default for Format {
    fn default() -> Format {
        Self::Mp4
    }
}
/// The status of the MediaRecording
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "deleted")]
    Deleted,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Processing
    }
}
/// The HTTP method Twilio should use to call the `status_callback` URL
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusCallbackMethod {
    #[serde(rename = "HEAD")]
    HEAD,
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
    #[serde(rename = "PATCH")]
    PATCH,
    #[serde(rename = "PUT")]
    PUT,
    #[serde(rename = "DELETE")]
    DELETE,
}

impl Default for StatusCallbackMethod {
    fn default() -> StatusCallbackMethod {
        Self::HEAD
    }
}
