/*
 * Twilio - Media
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MediaV1PlayerStreamer {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The reason why a PlayerStreamer ended
    #[serde(rename = "ended_reason", skip_serializing_if = "Option::is_none")]
    pub ended_reason: Option<EndedReason>,
    /// The URLs of related resources
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// Maximum PlayerStreamer duration in seconds
    #[serde(rename = "max_duration", skip_serializing_if = "Option::is_none")]
    pub max_duration: Option<i32>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// The status of the PlayerStreamer
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The URL to which Twilio will send PlayerStreamer event updates
    #[serde(rename = "status_callback", skip_serializing_if = "Option::is_none")]
    pub status_callback: Option<String>,
    /// The HTTP method Twilio should use to call the `status_callback` URL
    #[serde(
        rename = "status_callback_method",
        skip_serializing_if = "Option::is_none"
    )]
    pub status_callback_method: Option<StatusCallbackMethod>,
    /// The absolute URL of the resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Whether the PlayerStreamer is configured to stream video
    #[serde(rename = "video", skip_serializing_if = "Option::is_none")]
    pub video: Option<bool>,
}

impl MediaV1PlayerStreamer {
    pub fn new() -> MediaV1PlayerStreamer {
        MediaV1PlayerStreamer {
            account_sid: None,
            date_created: None,
            date_updated: None,
            ended_reason: None,
            links: None,
            max_duration: None,
            sid: None,
            status: None,
            status_callback: None,
            status_callback_method: None,
            url: None,
            video: None,
        }
    }
}

/// The reason why a PlayerStreamer ended
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndedReason {
    #[serde(rename = "ended-via-api")]
    EndedViaApi,
    #[serde(rename = "max-duration-exceeded")]
    MaxDurationExceeded,
    #[serde(rename = "stream-disconnected-by-source")]
    StreamDisconnectedBySource,
    #[serde(rename = "unexpected-failure")]
    UnexpectedFailure,
}

impl Default for EndedReason {
    fn default() -> EndedReason {
        Self::EndedViaApi
    }
}
/// The status of the PlayerStreamer
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "started")]
    Started,
    #[serde(rename = "ended")]
    Ended,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Created
    }
}
/// The HTTP method Twilio should use to call the `status_callback` URL
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusCallbackMethod {
    #[serde(rename = "HEAD")]
    HEAD,
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
    #[serde(rename = "PATCH")]
    PATCH,
    #[serde(rename = "PUT")]
    PUT,
    #[serde(rename = "DELETE")]
    DELETE,
}

impl Default for StatusCallbackMethod {
    fn default() -> StatusCallbackMethod {
        Self::HEAD
    }
}
