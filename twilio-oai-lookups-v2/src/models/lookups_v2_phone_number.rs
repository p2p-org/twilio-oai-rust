/*
 * Twilio - Lookups
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LookupsV2PhoneNumber {
    /// An object that contains call forwarding status information
    #[serde(rename = "call_forwarding", skip_serializing_if = "Option::is_none")]
    pub call_forwarding: Option<serde_json::Value>,
    /// An object that contains caller name information
    #[serde(rename = "caller_name", skip_serializing_if = "Option::is_none")]
    pub caller_name: Option<serde_json::Value>,
    /// International dialing prefix
    #[serde(
        rename = "calling_country_code",
        skip_serializing_if = "Option::is_none"
    )]
    pub calling_country_code: Option<String>,
    /// Phone number's ISO country code
    #[serde(rename = "country_code", skip_serializing_if = "Option::is_none")]
    pub country_code: Option<String>,
    /// An object that contains line type information
    #[serde(rename = "enhanced_line_type", skip_serializing_if = "Option::is_none")]
    pub enhanced_line_type: Option<serde_json::Value>,
    /// An object that contains line type information
    #[serde(
        rename = "line_type_intelligence",
        skip_serializing_if = "Option::is_none"
    )]
    pub line_type_intelligence: Option<serde_json::Value>,
    /// An object that contains live activity information
    #[serde(rename = "live_activity", skip_serializing_if = "Option::is_none")]
    pub live_activity: Option<serde_json::Value>,
    /// Phone number in national format
    #[serde(rename = "national_format", skip_serializing_if = "Option::is_none")]
    pub national_format: Option<String>,
    /// Phone number in E.164 format
    #[serde(rename = "phone_number", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<String>,
    /// An object that contains SIM swap information
    #[serde(rename = "sim_swap", skip_serializing_if = "Option::is_none")]
    pub sim_swap: Option<serde_json::Value>,
    /// The absolute URL of the resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Boolean which indicates if the phone number is valid
    #[serde(rename = "valid", skip_serializing_if = "Option::is_none")]
    pub valid: Option<bool>,
    /// Contains reasons why a phone number is invalid
    #[serde(rename = "validation_errors", skip_serializing_if = "Option::is_none")]
    pub validation_errors: Option<Vec<ValidationErrors>>,
}

impl LookupsV2PhoneNumber {
    pub fn new() -> LookupsV2PhoneNumber {
        LookupsV2PhoneNumber {
            call_forwarding: None,
            caller_name: None,
            calling_country_code: None,
            country_code: None,
            enhanced_line_type: None,
            line_type_intelligence: None,
            live_activity: None,
            national_format: None,
            phone_number: None,
            sim_swap: None,
            url: None,
            valid: None,
            validation_errors: None,
        }
    }
}

/// Contains reasons why a phone number is invalid
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValidationErrors {
    #[serde(rename = "TOO_SHORT")]
    TOOSHORT,
    #[serde(rename = "TOO_LONG")]
    TOOLONG,
    #[serde(rename = "INVALID_BUT_POSSIBLE")]
    INVALIDBUTPOSSIBLE,
    #[serde(rename = "INVALID_COUNTRY_CODE")]
    INVALIDCOUNTRYCODE,
    #[serde(rename = "INVALID_LENGTH")]
    INVALIDLENGTH,
    #[serde(rename = "NOT_A_NUMBER")]
    NOTANUMBER,
}

impl Default for ValidationErrors {
    fn default() -> ValidationErrors {
        Self::TOOSHORT
    }
}
