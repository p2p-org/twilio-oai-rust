/*
 * Twilio - Messaging
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MessagingV1BrandRegistrationsBrandVetting {
    /// The SID of the Account that created the vetting
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// A2P BrandRegistration Sid
    #[serde(rename = "brand_sid", skip_serializing_if = "Option::is_none")]
    pub brand_sid: Option<String>,
    /// SID for third-party vetting record
    #[serde(rename = "brand_vetting_sid", skip_serializing_if = "Option::is_none")]
    pub brand_vetting_sid: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The absolute URL of the Brand Vetting
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The type of vetting
    #[serde(rename = "vetting_class", skip_serializing_if = "Option::is_none")]
    pub vetting_class: Option<String>,
    /// The unique ID of the vetting
    #[serde(rename = "vetting_id", skip_serializing_if = "Option::is_none")]
    pub vetting_id: Option<String>,
    /// Third-party provider that has conducted the vetting
    #[serde(rename = "vetting_provider", skip_serializing_if = "Option::is_none")]
    pub vetting_provider: Option<VettingProvider>,
    /// Status of vetting attempt
    #[serde(rename = "vetting_status", skip_serializing_if = "Option::is_none")]
    pub vetting_status: Option<String>,
}

impl MessagingV1BrandRegistrationsBrandVetting {
    pub fn new() -> MessagingV1BrandRegistrationsBrandVetting {
        MessagingV1BrandRegistrationsBrandVetting {
            account_sid: None,
            brand_sid: None,
            brand_vetting_sid: None,
            date_created: None,
            date_updated: None,
            url: None,
            vetting_class: None,
            vetting_id: None,
            vetting_provider: None,
            vetting_status: None,
        }
    }
}

/// Third-party provider that has conducted the vetting
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VettingProvider {
    #[serde(rename = "campaign-verify")]
    CampaignVerify,
}

impl Default for VettingProvider {
    fn default() -> VettingProvider {
        Self::CampaignVerify
    }
}
