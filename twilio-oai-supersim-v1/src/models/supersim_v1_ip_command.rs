/*
 * Twilio - Supersim
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SupersimV1IpCommand {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The IP address of the device that the IP Command was sent to or received from
    #[serde(rename = "device_ip", skip_serializing_if = "Option::is_none")]
    pub device_ip: Option<String>,
    /// The port that the IP Command either originated from or was sent to
    #[serde(rename = "device_port", skip_serializing_if = "Option::is_none")]
    pub device_port: Option<i32>,
    /// The direction of the IP Command
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// The payload of the IP Command sent to or from the Super SIM
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    /// The payload type of the IP Command
    #[serde(rename = "payload_type", skip_serializing_if = "Option::is_none")]
    pub payload_type: Option<PayloadType>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// The ICCID of the Super SIM that this IP Command was sent to or from
    #[serde(rename = "sim_iccid", skip_serializing_if = "Option::is_none")]
    pub sim_iccid: Option<String>,
    /// The SID of the Super SIM that this IP Command was sent to or from
    #[serde(rename = "sim_sid", skip_serializing_if = "Option::is_none")]
    pub sim_sid: Option<String>,
    /// The status of the IP Command
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The absolute URL of the IP Command resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl SupersimV1IpCommand {
    pub fn new() -> SupersimV1IpCommand {
        SupersimV1IpCommand {
            account_sid: None,
            date_created: None,
            date_updated: None,
            device_ip: None,
            device_port: None,
            direction: None,
            payload: None,
            payload_type: None,
            sid: None,
            sim_iccid: None,
            sim_sid: None,
            status: None,
            url: None,
        }
    }
}

/// The direction of the IP Command
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "to_sim")]
    ToSim,
    #[serde(rename = "from_sim")]
    FromSim,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::ToSim
    }
}
/// The payload type of the IP Command
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PayloadType {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "binary")]
    Binary,
}

impl Default for PayloadType {
    fn default() -> PayloadType {
        Self::Text
    }
}
/// The status of the IP Command
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "received")]
    Received,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Queued
    }
}
