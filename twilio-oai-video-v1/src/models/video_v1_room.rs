/*
 * Twilio - Video
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.30.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VideoV1Room {
    /// The SID of the Account that created the resource
    #[serde(rename = "account_sid", skip_serializing_if = "Option::is_none")]
    pub account_sid: Option<String>,
    /// Indicates whether the room will only contain audio track participants for group rooms.
    #[serde(rename = "audio_only", skip_serializing_if = "Option::is_none")]
    pub audio_only: Option<bool>,
    /// The ISO 8601 date and time in GMT when the resource was created
    #[serde(rename = "date_created", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// The ISO 8601 date and time in GMT when the resource was last updated
    #[serde(rename = "date_updated", skip_serializing_if = "Option::is_none")]
    pub date_updated: Option<String>,
    /// The duration of the room in seconds
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// The time a room will remain active after last participant leaves.
    #[serde(rename = "empty_room_timeout", skip_serializing_if = "Option::is_none")]
    pub empty_room_timeout: Option<i32>,
    /// Enable Twilio's Network Traversal TURN service
    #[serde(rename = "enable_turn", skip_serializing_if = "Option::is_none")]
    pub enable_turn: Option<bool>,
    /// The UTC end time of the room in UTC ISO 8601 format
    #[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// Indicates if this is a large room.
    #[serde(rename = "large_room", skip_serializing_if = "Option::is_none")]
    pub large_room: Option<bool>,
    /// The URLs of related resources
    #[serde(rename = "links", skip_serializing_if = "Option::is_none")]
    pub links: Option<serde_json::Value>,
    /// The maximum number of published tracks allowed in the room at the same time
    #[serde(
        rename = "max_concurrent_published_tracks",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_concurrent_published_tracks: Option<i32>,
    /// The maximum number of seconds a Participant can be connected to the room
    #[serde(
        rename = "max_participant_duration",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_participant_duration: Option<i32>,
    /// The maximum number of concurrent Participants allowed in the room
    #[serde(rename = "max_participants", skip_serializing_if = "Option::is_none")]
    pub max_participants: Option<i32>,
    /// The region for the media server in Group Rooms
    #[serde(rename = "media_region", skip_serializing_if = "Option::is_none")]
    pub media_region: Option<String>,
    /// Whether to start recording when Participants connect
    #[serde(
        rename = "record_participants_on_connect",
        skip_serializing_if = "Option::is_none"
    )]
    pub record_participants_on_connect: Option<bool>,
    /// The unique string that identifies the resource
    #[serde(rename = "sid", skip_serializing_if = "Option::is_none")]
    pub sid: Option<String>,
    /// The status of the room
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The URL to send status information to your application
    #[serde(rename = "status_callback", skip_serializing_if = "Option::is_none")]
    pub status_callback: Option<String>,
    /// The HTTP method we use to call status_callback
    #[serde(
        rename = "status_callback_method",
        skip_serializing_if = "Option::is_none"
    )]
    pub status_callback_method: Option<StatusCallbackMethod>,
    /// The type of room
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// An application-defined string that uniquely identifies the resource
    #[serde(rename = "unique_name", skip_serializing_if = "Option::is_none")]
    pub unique_name: Option<String>,
    /// The time a room will remain active when no one joins.
    #[serde(
        rename = "unused_room_timeout",
        skip_serializing_if = "Option::is_none"
    )]
    pub unused_room_timeout: Option<i32>,
    /// The absolute URL of the resource
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// An array of the video codecs that are supported when publishing a track in the room
    #[serde(rename = "video_codecs", skip_serializing_if = "Option::is_none")]
    pub video_codecs: Option<Vec<VideoCodecs>>,
}

impl VideoV1Room {
    pub fn new() -> VideoV1Room {
        VideoV1Room {
            account_sid: None,
            audio_only: None,
            date_created: None,
            date_updated: None,
            duration: None,
            empty_room_timeout: None,
            enable_turn: None,
            end_time: None,
            large_room: None,
            links: None,
            max_concurrent_published_tracks: None,
            max_participant_duration: None,
            max_participants: None,
            media_region: None,
            record_participants_on_connect: None,
            sid: None,
            status: None,
            status_callback: None,
            status_callback_method: None,
            _type: None,
            unique_name: None,
            unused_room_timeout: None,
            url: None,
            video_codecs: None,
        }
    }
}

/// The status of the room
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "in-progress")]
    InProgress,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::InProgress
    }
}
/// The HTTP method we use to call status_callback
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusCallbackMethod {
    #[serde(rename = "HEAD")]
    HEAD,
    #[serde(rename = "GET")]
    GET,
    #[serde(rename = "POST")]
    POST,
    #[serde(rename = "PATCH")]
    PATCH,
    #[serde(rename = "PUT")]
    PUT,
    #[serde(rename = "DELETE")]
    DELETE,
}

impl Default for StatusCallbackMethod {
    fn default() -> StatusCallbackMethod {
        Self::HEAD
    }
}
/// The type of room
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "go")]
    Go,
    #[serde(rename = "peer-to-peer")]
    PeerToPeer,
    #[serde(rename = "group")]
    Group,
    #[serde(rename = "group-small")]
    GroupSmall,
}

impl Default for Type {
    fn default() -> Type {
        Self::Go
    }
}
/// An array of the video codecs that are supported when publishing a track in the room
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VideoCodecs {
    #[serde(rename = "VP8")]
    VP8,
    #[serde(rename = "H264")]
    H264,
}

impl Default for VideoCodecs {
    fn default() -> VideoCodecs {
        Self::VP8
    }
}
